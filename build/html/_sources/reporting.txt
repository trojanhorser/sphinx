
.. toctree::
   :maxdepth: 1

Reporting
================

The reporting API faciliates the creation of reports in many different formats including pdf, csv ect. 

Creating A Basic Report
-----------------------

reportDef
~~~~~~~~~

The **reportDef** object is used to initialize a report. 

The example below shows how to define a reportDef object.

.. code-block:: javascript

	var report = new reportDef();
	
useReport(reportDef)
~~~~~~~~~~~~~~~~~~~~

The **useReport** function accepts a **reportDef** object as its parameter.
The report object that is passed represents the report object which will
be used by the program.

The example below shows how to useReport function is used:

.. code-block:: javascript

	var report = new reportDef();
	useReport(report);
	
printOut(HtmlString)
~~~~~~~~~~~~~~~~~~~~

The **printOut** function accepts a **HtmlString** as it's parameter as HTML. It is used to
specify the output of the report indicated by the **useReport()** function. 
The output is in HTML format. 

An example of how the **printOut()** function is used:

.. code-block:: javascript

	var report = new reportDef();
	useReport(report);
	printOut("<h1>Report Information</h1>");


An example of how the **printOut()** function can be called mutilple times in order to generat:

.. code-block:: javascript

	var report = new reportDef();
	useReport(report);
	printOut("<h1>Report Information</h1>");
	printOut("<h1>More Report Information</h1>");
	

createReport()
~~~~~~~~~~~~~~

The **createReport** fucntion builds the report based on the  value specified in the **printOut()**
function. It returns a boolean value to indicate if the report has been created or not.


The example below shows how the 

.. code-block:: javascript

	var report = new reportDef();
	useReport(report);
	
	printOut("<h1>Report Information</h1>");
	printOut("<h1>More Report Information</h1>");
	
	//Create report fucntion
	if (createReport()) {
		alert("Report has been created");
	}


viewReport()
~~~~~~~~~~~~

The **viewReport()** function displays the report created in pdf format. 


The example below shows how the **viewReport** function is used.

.. code-block:: javascript

	var report = new reportDef();
	useReport(report);
	
	printOut("<h1>Report Information</h1>");
	printOut("<h1>More Report Information</h1>");
	
	//Create report fucntion
	if (createReport()) {
		viewReport();
	}

Advanced Reports
================

reportTableDef
--------------

The **reportTableDef** object is used to define the details section of a report. 

reportTableDef Attributes
-------------------------

fixedwidth
~~~~~~~~~~

The **fixedwith** atttribute indicates that the report details will be constrained to a default width. If it is not 
specified the rows in the details section of the report will have a width based ont the contents. 

rowsperpage
~~~~~~~~~~~

The **rowsperpage** attribute specifies to amount of rows which will be displayed on a page before the report
breaks.

Report Variables
----------------

Reports consist of many default variables which are prefixed with the @ symbol. The description for each
variable is given below:

@date 
~~~~~

Shows the current date.


- The example below shows how to use the current @date report variable

.. code-block:: javascript

 	var report = new reportDef();
	useReport(report);
	printOut("<h1>Current Date @date</h1>");
	
	
@page
~~~~~

- The example below shows how to use the current @page report variable

Shows the current page number.


.. code-block:: javascript

 	var report = new reportDef();
	useReport(report);
	printOut("<h1>Current Page @page</h1>");
	
	
Dynamic Variables
~~~~~~~~~~~~~~~~~

Dynamic variables can be created using the following format <@:variableName@>. The **variableName** represents a 
global variable which can be used:

- The example below shows how to use the <@:globalVariable@> contained in the report:

.. code-block:: javascript

 	globalVariable = "value";
	useReport(report);
	printOut("<h1><@:globalVariable@></h1>");
	
reportDef Attributes
--------------------

reporttable
~~~~~~~~~~~

The **reporttable**, this accepts a **reportTableDef** object. as it's parameter.


reportBreak
-----------

A page break is a marker that tells the program that a new page should be started based on a specific condition.











	
	




