
.. toctree::
   :maxdepth: 1

Fields
======

Javascript library dependency  to be included
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In order  for data bound fields to be parsed the following librariese must be included:

			.. literalinclude:: example.html
					   :linenos:
					   :language: html
					   :lines: 6-9

Custom Attribute Description
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A form field consists of a **span** html tag with custom attributes.
These attributes are parsed to produce the HTML which is ultimately rendered by the web application.
These attributes are described in detail below:

1. **ref** - The *ref* attribute is used to reference a field from the data dictionary.
When a field is referenced it uses the attributes defined in the data dictionary to generate the html filed.
The example below uses *bilno* as the referenced field:

			.. literalinclude:: example.html
								   :language: html
								   :lines: 137


2. **type** - The *type* attribute determines the data type that the filed will accept. There are four data types; character,numeric, date and time.
Each of these attributes are explained below:

		- *character* - The charater attribute allows all alphanumeric characters to be accept by the html field. An example is shown below:

			.. literalinclude:: example.html
									   :language: html
									   :lines: 141

		- *numeric* - The numeric attribute allows only numeric values to accepted by the html field. It produces an alert when input is invalid. An example is shown below:

			.. literalinclude:: example.html
								   :language: html
								   :lines: 139

		- *date* - The date attribute formats the html field into three sepperate sections; **year**, **month** and **day**. The order of these sections will vary based on the format specified in the application. An example is shown below:

			.. literalinclude:: example.html
								   :language: html
								   :lines: 143

		- *time* - The time attribute formats the html field in two sections, **minutes** and **seconds**. An example is shown below:

			.. literalinclude:: example.html
								   :language: html
								   :lines: 145

3. **length** - This length attribute specifies the maximum length of a field, according to the field type. If the length specified is greater than 80 then html text area will be rendered instead of an input field. Validation is also added if the user exceeds the maxiimum length of the field.

		.. literalinclude:: example.html
								   :language: html
								   :lines: 116


4. **decimal** - The decimal place field is used to indicate the decimal place for numeric fields. An example is shown below:

		.. literalinclude:: example.html
								   :language: html
								   :lines: 118

5. **editcode** -  Specifies the format in which input may be accepted.

		.. literalinclude:: example.html
								   :language: html
								   :lines: 167

6. **fieldclass** - Specifies a stylesheet (CSS) class name to determine how the field is formatted.

		.. literalinclude:: example.html
								   :language: html
								   :lines: 143

7. **label** - Specifies the text for the label that will be displayed along with the field. Overrides the label text set in the data dictionary.

	    .. literalinclude:: example.html
								   :language: html
								   :lines: 137


8. **nolabel** - Instructs program not to show a label for the field.

		.. literalinclude:: example.html
								   :language: html
								   :lines: 139


9. **search** - Causes a search icon to appear beside the field that triggers the execution of a specified function.

		.. literalinclude:: example.html
								   :language: html
								   :lines: 165


10. **labelclass** - Specifies a stylesheet (CSS) class name to determine how the field's label is formatted.

	    .. literalinclude:: example.html
								   :language: html
								   :lines: 145

11. **labelwidth** - Specifies a custom width for the label, overriding any width that may have been set for the field's label in the DD.

	    .. literalinclude:: example.html
								   :language: html
								   :lines: 147

12. **upper** - Causes the aphabetic characters displayed in a field to be capitalized. Also capitalizes characters entered by the user.

		.. literalinclude:: example.html
								   :language: html
								   :lines: 149

13. **output** - Displays the field's content as text in a disabled control (similar to readonly, but has a different appearance).

		.. literalinclude:: example.html
								   :language: html
								   :lines: 151

14. **textarea** - Represents the field as a free-text entry area with a vertical scrollbar. Additional attributes (rows and cols) can be specified as well.

		.. literalinclude:: example.html
									:language: html
								    :lines: 153

15. **rows** - Applies only to field with attribute 'textarea'. Specifies number of lines shown in the viewable area of the field at one time.

		.. literalinclude:: example.html
								   :language: html
								   :lines: 155

16. **cols** - Applies only to field with attribute 'textarea'. Specifies maximum number of characters the may be shown in each line of the viewable area of the field at one time.

.. note:: the **rows** and **cols** attributes only apply to textarea fields and will be ignored for **date** and **time** fields.


17. **nocalendar** - Causes a date field to be displayed without the default calendar icon and the associated date-picking functionality it offers. {Calendar not to be displayed for date field}

		.. literalinclude:: example.html
								   :language: html
								   :lines: 159


18. **select** - Field create as a select field. Use a string of ordered pairs to show the values/text.

		.. literalinclude:: example.html
								   :language: html
								   :lines: 161



19. **readonly** - Prevents the field's content from being edited by the user.

		.. literalinclude:: example.html
								   :language: html
								   :lines: 161

20. **editmask** - Specifies a prescribed data entry pattern that will be enforced when the user attempts to make entries in the field.

	   .. literalinclude:: example.html
								   :language: html
								   :lines: 130


21. **required** - Marks a field for mandatory entry

		.. literalinclude:: example.html
								   :language: html
								   :lines: 163

Field Functions
----------------

focusOn(field)
~~~~~~~~~~~~~~~~~~~~

The **focusOn** function gives focus to a specified html field.

- Focus can be given to a single field element. The example below uses the field name
  **'customerid'** as the field to focus on.

.. code-block:: javascript

   focusOn('customerid')

- Text can also be highlighted by passsing **'*highlight'** or **'*hi*'** as a second parameter as shown in the example below:

.. code-block:: javascript

   focusOn('customerid','*highlight')
   /** OR **/
   focusOn('customerid','*hi')

  
protect(fieldOne,fieldTwo,....);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The **protect** function prevents fields from being edited by the user.

- A single field can be protected by specifying the field name. In the example below "companyname"
is used as shown below:

.. code-block:: javascript

   protect('companyname');

- Multiple fields can also be protected by specifying multiple fields as shown below:
 
.. code-block:: javascript

   protect('companyname','companyaddress');


unProtect(fieldOne,fieldTwo,....);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The **unProtect** function takes a field from a protected state to an editable state. 

- A single field can be un-protected by specifying the field name. In the example below "companyname"
is used as shown below:

.. code-block:: javascript

   unProtect('firsname');

- Multiple fields can also be un-protected by specifying multiple fields as shown below:
 
.. code-block:: javascript

   unProtect('firsname','lastname');


      
changeVar(field,value,fieldType);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The **changeVar** function changes the **value** of a specified **field**.

- In the example below the field **'description'** is changed to **'Description Has Changed'**

.. code-block:: javascript

   changeVar('description','Description Has Changed');

- The changeVar function also has the ability to detect which the **field type** and modify the data assigned to match the field type. 
  In the example below the field **'salary'** which is numeric is assigned the value **'$7k656'**. The value **'$7k656'** will be changed
  to **7656** automatically by the change var function  

.. code-block:: javascript

   changeVar('salary','$7k656');
   newValue = valueOf('salary')
   
   /**
    newValue will be 7656
   **/

- The value of **date fields** can also be changed. This is done by passing in **'*date'** as the third parameter as shown below:

.. code-block:: javascript

   changeVar('startDate','20150901','*date'); 
   /*
    OR
   */
   changeVar('startDate','20150901')

.. note:: The format of the date passed must be the same as the default format.
           For example is the default date is dd/mm/yyyy then a date in that format must be passed as the value.

- Time fields can also be set by passing in the time in time format defined

.. code-block:: javascript
	
   /* For millitary time 21:00 HRS*/
   changeVar('startTime',2100);
   
    /* For standard time 9:00 PM*/
   changeVar('startTime',900);

   
- Fields can be set with the value of other fields by using the **valueOf** function as shown below:		   

.. code-block:: javascript

   changeVar('gpcmt',valueOf('chgdesc'));


fieldHTML('field=<fielName>')
~~~~~~~~~~~~~~~~~~~~~~~~~~

The **fieldHTML** function outputs the html which is used to render a field. 

- The following example shows how to retrieve the html for the **starttime** field:

.. code-block:: html
   <!-- Field definition -->
   <span field=starttime type=time></span>

.. code-block:: javascript

   var html = fieldHTML('field=starttime')
	/*
		Value of html is:
		<INPUT maxLength=20 size=22 name=starttime fldType="char" length="20"> 
	*/

hideElement(fieldOne,fieldTwo,..);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The **hideElement** function hides the field(s) specified.

- The following example shows how to hide one field:

.. code-block:: javascript
	
   hideElement('username')
   
- The following example shows how to hide multiple fields:

.. code-block:: javascript
	
   hideElement('username','password')
   

showElement(fieldOne,fieldTwo,..);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The **showElement** function shows the field(s) specified.

- The following example shows how to make a single field visible:

.. code-block:: javascript
	
   showElement('salary')
   
- The following example shows how to make multiple fields visisble:

.. code-block:: javascript
	
   showElement('tax','salary')


neverShow(fieldOne,fieldTwo,..);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The **neverShow** function hides a specified field permanently. Even if the **showElement** function is called on fields they will never be diplayed.

- The following example shows how to permanently hide one field:

.. code-block:: javascript
	
   neverShow('username')
   
- The following example shows how to permanently hide multiple fields:

.. code-block:: javascript
	
   hideElement('username','password')
     

popUpMsg(message,field);
~~~~~~~~~~~~~~~~~~~~~~~~

The **popUpMsg** function shows a message below a specified field.

- The following example shows how to display the **popUpMsg** for the **'receipt'** field. 

.. code-block:: javascript
	
   popUpMsg('Plese enter a value greater than 0','receipt');


changeContent(element,htmlText);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The **changeContent** function changes the inner html for a specific element. 

- The example below shows how to change the content of a **div**.

.. code-block:: html
   
   <div id='first'> First Text </div>
	
.. code-block:: javascript
	
   changeContent('first',"Second Text");
	/*
		HTML will be changed to:
		<div id='first'> Second Text </div>
	*/
   

contentOf(element);
~~~~~~~~~~~~~~~~~~~~

The **contentOf** function returns the inner text/html for a specific element. 

- The example below shows how to return the text content of a **div**.

.. code-block:: html

    <div id='first'> <b>First Text<b> </div>

.. code-block:: javascript
	
   var innerText = contentOf('first');
	/*
		value of innerText will be:
		
		First Text
	*/

- The HTML content of an element can also be retrieved by using the **"*html"** parameter, as shown in the example below:

.. code-block:: html

   <div id='first'> <b>First Text<b> </div>

.. code-block:: javascript
	
   var innerHtml = contentOf('first','*html');
	/*
		value of innerHtml will be:
		
		<b> First Text </b>
	*/

	
- The example below shows how to replace the inner html of one element with another using the **changeContent** function:

.. code-block:: html
   
   <div id='first'> First Text </div>
   <div id='second'> Second Text </div>
	
.. code-block:: javascript
	
   changeContent('first',contentOf('second'));
	/*
		HTML will be changed to:
		<div id='first'> Second Text </div>
	*/

isBlank(value)
~~~~~~~~~~~~~~

The **isBlank** function returns a boolean value (true/false) if the string value passed is empty. An
example of its use is shown below:

.. code-block:: javascript
	
	var firstName = valueOf('firstname');
	
	if(isBlank(firstName)){	
		popUpMsg('Plese enter first name','firstname');
	}

editDate(date,format)
~~~~~~~~~~~~~~~~~~~~~

The **editDate** function converts the **date** passed to it in the specfied format. 
If no dateformat is specified it uses the default format 'Y'.

- The example below shows how to use **editDate** without the date format parameter:

.. code-block:: javascript
	
	var dateOne = editDate('20150901')
	
	/*
		The value of dateOne will be:
		
		2015/09/01
	*/

- The example below shows how to use **editDate** with the date format parameter  **'Y'**:

.. code-block:: javascript
	
	var dateOne = editDate('20150901','Y')
	
	/*
		The value of dateOne will be:
		
		2015/09/01
	*/

- The example below shows how to use **editDate** with the date format parameter  **'d'**:

.. code-block:: javascript
	
	var dateOne = editDate('20150901','d')
	
	/*
		The value of dateOne will be:
		
		01/09/2015
	*/

	
validDate(date,format) // returns true of false default=Y
~~~~~~~~~~~~~~~~~~~~~

The **validDate** function returns a boolean value (true/false) if the date is valid. 
If no date format is specified it uses the default format 'Y'.

- The example below shows how to use **validDate** without the date format parameter:

.. code-block:: javascript
	
	var result = validDate('20150901')
	
	/*
		The value of result will be:
		
		result = true;
	*/

- The example below shows how to use **validDate** with the date format parameter 'D' (dd/mm/yyy):

.. code-block:: javascript
	
	var result = validDate('20150901','D')
	
	/*
		The value of result will be:
		
		result = false;
	*/

- The example below shows how to use **validDate** with the date format parameter 'Y' (yyyy/mm/dd):

.. code-block:: javascript
	
	var result = validDate('20150901','Y')
	
	/*
		The value of result will be:
		
		result = true;
	*/

editTime(time);
~~~~~~~~~~~~~~~

The **editDate** function converts the **time** passed to the specfied format. 

- Examples of usage are shown below:

.. code-block:: javascript
	
	var result = editTime(2000)
	
	/*
		The value of result will be:
		
		result = 02:00;
	*/


validTime(time);
~~~~~~~~~~~~~~~~

The **validTime** function returns true or false if the **time** is valid.

- An example with a valid time is shown below:

.. code-block:: javascript
	
	var result = validTime(2000)
	
	/*
		The value of result will be:
		
		result = true;
	*/

- An example with an invalid time is shown below:

.. code-block:: javascript
	
	var result = validTime(2500)
	
	/*
		The value of result will be:
		
		result = false;
	*/

valueOf(field);
~~~~~~~~~~~~~~~

The **valueOf** function returns the value of a specified field. An example is shown below:

.. code-block:: javascript
	
	var result = valueOf('username')
	
	/*
		The value of result will be:
		
		result = 'myUsername';
	*/
